---

---

<div id="visualisation">
  <div id="heatmap"></div>
</div>

<div id="controls">
  <label for="infrastructure-select">Select Infrastructure Type:</label>
  <select id="infrastructure-select">
    <option value="all">All</option>
    <option value="sewer_and_water">Sewer and Water</option>
    <option value="power">Power</option>
    <option value="roads_and_bridges">Roads and Bridges</option>
    <option value="medical">Medical</option>
    <option value="buildings">Buildings</option>
  </select>
</div>

<div id="linegraph"></div>

<style>
  /* #visualisation {
    display: grid;
    grid-template-columns: 1fr 1fr;
  }

  #map {
    position: relative;
  }

  .legend {
    position: absolute;
    top: 200px;
    left: 30px;
  } */
</style>

<script>
  import * as d3 from "d3";
  import * as Plot from "@observablehq/plot";

  interface ReportRow {
    location: number;
    time: Date;
    sewer_and_water: number;
    power: number;
    roads_and_bridges: number;
    medical: number;
    buildings: number;
    shake_intensity: number;
  }

  interface AggregatedReportRow {
    time: Date;
    location: number;
    damage: number;
    count: number;
  }

  let rawData: ReportRow[];
  let rawDataBuckets: ReportRow[][];
  let processedData: AggregatedReportRow[];

  const locations = [
    "Palace Hills",
    "Northwest",
    "Old Town",
    "Safe Town",
    "Southwest",
    "Downtown",
    "Wilson Forest",
    "Scenic Vista",
    "Broadview",
    "Chapparal",
    "Terrapin Springs",
    "Pepper Mill",
    "Cheddarford",
    "Easton",
    "Weston",
    "Southton",
    "Oak Willow",
    "East Parton",
    "West Parton",
  ];
  const infrastructure = {
    all: "Total",
    sewer_and_water: "Water",
    power: "Power",
    roads_and_bridges: "Road",
    medical: "Medical",
    buildings: "Building",
  };

  // Runs once on load
  async function init() {
    // Fetch CSV
    rawData = await d3.csv("cleaned-data.csv", (d) => ({
      ...d,
      location: +d.location,
      time: new Date(d.time),
      sewer_and_water: +d.sewer_and_water,
      power: +d.power,
      roads_and_bridges: +d.roads_and_bridges,
      medical: +d.medical,
      buildings: +d.buildings,
      shake_intensity: +d.shake_intensity,
    }));

    // Sort by Date
    rawData.sort((a, b) => a.time.getTime() - b.time.getTime());

    // Sort Raw Data into 60 minute buckets
    rawDataBuckets = Array.from({ length: 121 }, () => []);
    let startTime = new Date("2020-04-6 00:00:00").getTime();
    for (const row of rawData) {
      const elapsedMs = row.time.getTime() - startTime;
      const bucketIndex = Math.floor(elapsedMs / (60 * 60 * 1000)); // 60 min * 60 sec * 1000 ms

      rawDataBuckets[bucketIndex].push(row);
    }

    // Initial update
    update();
  }

  // Used to update the data frame and rerender the charts (runs everytime a change is made)
  function update() {
    // Aggregate the Raw Data
    const aggregated: AggregatedReportRow[] = [];

    for (let i = 0; i < rawDataBuckets.length; i++) {
      const grouped = d3.group(rawDataBuckets[i], (d) => d.location);
      for (const [location, records] of grouped) {
        let damage: number;
        let count: number;

        if (selectedInfrastructure === "all") {
          const values = [
            d3.mean(records, (d) => d.sewer_and_water) ?? NaN,
            d3.mean(records, (d) => d.power) ?? NaN,
            d3.mean(records, (d) => d.roads_and_bridges) ?? NaN,
            d3.mean(records, (d) => d.medical) ?? NaN,
            d3.mean(records, (d) => d.buildings) ?? NaN,
          ].filter((v) => !isNaN(v));
          damage = d3.mean(values) ?? NaN;
          count = records.length;
        } else {
          damage =
            d3.mean(
              records,
              (d) => d[selectedInfrastructure as InfrastructureKey]
            ) ?? NaN;
          count = records.filter(
            (d) => !isNaN(d[selectedInfrastructure as InfrastructureKey])
          ).length;
        }
        if (count > 0) {
          aggregated.push({
            location,
            time: new Date(
              new Date("2020-04-6 00:00:00").getTime() + i * 60 * 60 * 1000
            ),
            damage,
            count,
          });
        }
      }
    }

    processedData = aggregated;
    heatmap();
    linegraph();
  }

  // Used to render the heatmap
  function heatmap() {
    const container = document.getElementById("heatmap");
    if (!container) return;

    const plot = Plot.plot({
      width: 1200,
      height: 500,
      marginLeft: 100,
      round: false,
      label: null,
      x: {
        type: "utc",
        axis: "top",
      },
      y: {
        tickFormat: (d) => locations[d - 1],
      },
      color: {
        scheme: "purd",
        legend: true,
        label: `Mean ${infrastructure[selectedInfrastructure]} Damage`,
        unknown: "#0f0",
        domain: [0, 11],
        ticks: [2, 4, 6, 8, 10],
      },
      marks: [
        Plot.barX(processedData, {
          x: "time",
          y: "location",
          fill: "damage",
          interval: d3.utcHour,
          inset: 0.5,
          tip: true,
          title: (d) => {
            const name = locations[d.location - 1];
            if (!d || (isNaN(d.damage) && isNaN(d.count)))
              return `${name}\nno data`;

            return (
              `${name}\n` +
              `${d3.utcFormat("%Y-%m-%d %H:%M")(new Date(d.time.getTime() + 60 * 60 * 1000))}\n` +
              `Mean ${infrastructure[selectedInfrastructure]} Damage: ${
                isNaN(d.damage) ? "No Data" : d.damage.toFixed(1)
              }/10\n` +
              `# of Reports: ${isNaN(d.count) ? "No Data" : d.count}`
            );
          },
        }),
      ],
    });

    container.innerHTML = "";
    container.appendChild(plot);
  }

  // Used to render the line graphs
  function linegraph() {
    const container = document.getElementById("linegraph");
    if (!container) return;

    const aggregated = [];

    const fields = [
      { key: "sewer_and_water", label: "Sewer and Water" },
      { key: "power", label: "Power" },
      { key: "roads_and_bridges", label: "Roads and Bridges" },
      { key: "medical", label: "Medical" },
      { key: "buildings", label: "Building" },
      { key: "shake_intensity", label: "Shake Intensity" },
    ];

    const data = d3.group(rawData, (d) => d.time);
    for (const [time, records] of data) {
      for (const { key, label } of fields) {
        const values = records
          .map((d) => d[key as Exclude<keyof ReportRow, "time" | "location">])
          .filter((v) => !isNaN(v));
        const mean = d3.mean(values) ?? NaN;
        const stdev = d3.deviation(values) ?? 0;

        aggregated.push({
          time,
          damage: mean,
          stdev,
          industry: label,
        });
      }
    }

    const plot = Plot.plot({
      width: 1200,
      marginLeft: 100,
      marginBottom: 200,
      x: {
        type: "utc",
        axis: "top",
      },
      y: {
        axis: "right",
        ticks: [2, 4, 6, 8, 10],
      },
      fy: {
        padding: 0.2,
      },
      label: null,
      marks: [
        Plot.areaY(aggregated, {
          x: "time",
          y1: (d) => d.damage - d.stdev,
          y2: (d) => d.damage + d.stdev,
          fy: "industry",
          fill: "#f00",
          fillOpacity: 0.2,
        }),
        Plot.lineY(aggregated, {
          x: "time",
          y: "damage",
          fy: "industry",
          tip: true,
          title: (d) =>
            `${d.industry}\n` +
            `${d3.utcFormat("%Y-%m-%d %H:%M")(new Date(d.time.getTime() + 60 * 60 * 1000))}\n` +
            `Damage: ${d.damage.toFixed(1)} Â±${d.stdev.toFixed(1)}`,
        }),
        Plot.frame(),
        Plot.crosshairX(aggregated, {
          x: "time",
          textFill: "white",
          opacity: 1,
        }),
      ],
    });

    container.innerHTML = "";
    container.appendChild(plot);
  }

  // Infrasturcture select
  const infraSelect = document.getElementById(
    "infrastructure-select"
  ) as HTMLSelectElement;

  type InfrastructureKey = Exclude<
    keyof ReportRow,
    "location" | "time" | "shake_intensity"
  >;
  type SelectedKey = InfrastructureKey | "all";
  let selectedInfrastructure: SelectedKey = "all";

  infraSelect.addEventListener("change", () => {
    selectedInfrastructure = infraSelect.value as SelectedKey;
    update();
  });

  init();
</script>
