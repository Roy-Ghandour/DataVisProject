message <- "Hello World!"
print(message)
sweet
#this is a comment and won't effect anything
x = 13.8
print(x)
#typically snake case is used for multi-word variables
y = TRUE
print(class(y))
#thats a boolean btw
y = 14L
x = 14
print(class(y))
print(class(x))
message <- "Changed constant"
lol
message = "New message"
x <- 1e5L
test <- F
x <- 0x14L
print(x)
x <- 0x14
print(x)
print(class(x))
x <- 0x14L
print(class(x))
clear
clear()
help()
z <- paste("hello mr ", tets)
z <- paste("hello mr ", test)
print(z)
z <- paste("hello mr", test)
print(z)
#paste auto adds a space lol
x = "Hello"
y = "World"
paste(x, y)
z <- paste(x, y)
print(z)
x = 1
y = 2L
paste(x, y)
z <- paste(x, y)
typeof(z)
class(z)
x
T == test
test
T || test
T | test
if (test) {}
if (test) {
print("Hello")
}
demo()
url <- "https://api.collegefootballdata.com/games?year=2023"
delete(test)
remove(test)
clear
clear()
library(httr)
GET()
help()
print("hello")
# Imports
library(dplyr)
# Read in the CSV file
reports <- read.csv("mc1-reports-data.csv", stringsAsFactors = FALSE)
getwd()
setwd("/Users/roy/Desktop/University/DataVisProject/DataVisualisationProject/preprocessing")
# Imports
library(dplyr)
# Read in the CSV file
reports <- read.csv("mc1-reports-data.csv", stringsAsFactors = FALSE)
View(reports)
View(reports)
# Temp
# Convert timestamp column to POSIXct
df <- df %>% mutate(time_parsed = ymd_hms(time))
# Filter rows where minutes are not divisible by 5
invalid_times <- df %>%
filter(minute(time_parsed) %% 5 != 0 | second(time_parsed) != 0)
# View the invalid entries
print(invalid_times)
# Imports
library(dplyr)
# Read in the CSV file
reports <- read.csv("mc1-reports-data.csv", stringsAsFactors = FALSE)
# Temp
# Convert timestamp column to POSIXct
df <- df %>% mutate(time_parsed = ymd_hms(time))
# Imports
library(readr)
library(dplyr)
library(lubridate)
install.packages("readr")
install.packages("lubridate")
library(lubridate)
# Imports
library(readr)
clear
clear()
# Temp
# Convert timestamp column to POSIXct
df <- df %>% mutate(time_parsed = ymd_hms(time))
# Temp
# Convert timestamp column to POSIXct
reports <- reports %>% mutate(time_parsed = ymd_hms(time))
# Filter rows where minutes are not divisible by 5
invalid_times <- reports %>%
filter(minute(time_parsed) %% 5 != 0 | second(time_parsed) != 0)
# View the invalid entries
print(invalid_times)
View(invalid_times)
# Filter rows where minutes are not divisible by 5
invalid_times <- reports %>%
filter(minute(time_parsed) %% 5 == 0 & second(time_parsed) == 0)
# Filter out invalid times
reports <- reports %>%
mutate(time_parsed = ymd_hms(time)) %>%
filter(minute(time_parsed) %% 5 == 0 & second(time_parsed) == 0)
# Filter out invalid times
reports <- reports %>%
mutate(time_parsed = ymd_hms(time)) %>%
filter(minute(time_parsed) %% 5 == 0 & second(time_parsed) == 0) %>%
select(-time_parsed)
# Save aggregated data to CSV
write.csv(reports, "reports.csv", row.names = FALSE)
